// This is a sample model to get you started.

/**
 * A sample data source using local sqlite db.
 */
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
    provider = "prisma-client-js"
}

model POI {
    id String @id
    poi_id String @unique
    poi_name String
    lon Float
    lat Float
    description_fr String
    description_en String
    description_de String
    description_it String
    description_es String
    description_pt String
    sportsolympiquesencompetition_fr String[]
    sportsolympiquesencompetition_en String[]
    sportsolympiquesencompetition_de String[]
    sportsolympiquesencompetition_it String[]
    sportsolympiquesencompetition_es String[]
    sportsolympiquesencompetition_pt String[]
    urlredirection_fr String
    urlredirection_en String
    urlredirection_de String
    urlredirection_it String
    urlredirection_es String
    urlredirection_pt String
    sportsparalympiquesencompetition_fr String[]
    sportsparalympiquesencompetition_en String[]
    sportsparalympiquesencompetition_de String[]
    sportsparalympiquesencompetition_it String[]
    sportsparalympiquesencompetition_es String[]
    sportsparalympiquesencompetition_pt String[]
}

model Boutique {
    id String @id @default(cuid())
    title String
    address String
    lon Float
    lat Float
    external_link String
    instagram_link String
    facebook_link String
    twitter_link String
    ville String
}

model Project {
    id String @id
    project_oc_r_id String @unique
    name String
    nom_de_la_structure_c String
    presentation_synthetique_du_projet_c String
    date_de_debut_c DateTime
    date_de_fin_c DateTime
    public_adresse_c String
    lieu_de_presentation_c String
    adresse_c String
    longitude_c Float
    latitude_c Float
    geolocation Geolocation @relation(fields: [geolocation_id], references: [id])
    geolocation_id Int @unique
    departement Int
    commune String
    tarif_du_projet_c String
    veuillez_preciser_les_tarifs_du_projet_c String?
    instagram_link String?
    facebook_link String?
    twitter_link String?
    discipline_principale_du_projet_c String[]
}

model Geolocation {
    id Int @id @default(autoincrement())
    lon Float
    lat Float
    project Project?
}

model ParkingSite {
    id String @id @default(cuid())
    site String
    nom_site String
    nom_du_parking_velo String
    adresse_du_parking_velo String
    geoShape GeoShape @relation(fields: [geoShapeId], references: [id])
    geoShapeId Int @unique
    geoPoint GeoPoint @relation(fields: [geoPointId], references: [id])
    geoPointId Int @unique
}

model GeoShape {
    id Int @id @default(autoincrement())
    type String
    coordinates Float[]
    properties Json
    parkingSite ParkingSite?
}

model GeoPoint {
    id Int @id @default(autoincrement())
    lon Float
    lat Float
    parkingSite ParkingSite?
    pointOfInterest PointOfInterest?
    venue Venue?
}

model PointOfInterest {
    id String @id @default(cuid())
    poi_id String @unique
    poi_parent_id String
    poi_type_id String
    poi_name String
    poi_lat Float
    poi_lon Float
    point_geo GeoPoint @relation(fields: [point_geo_id], references: [id])
    point_geo_id Int @unique
    ufr_pmr Boolean
}
model Venue {
    id              String    @id @default(cuid())
    code_site       String
    nom_site        String
    category_id     String
    sports          String
    start_date      DateTime
    end_date        DateTime
    address         String?
    latitude        Float
    longitude       Float
    geoPoint        GeoPoint  @relation(fields: [geoPointId], references: [id])
    geoPointId      Int       @unique
}